-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
	id INTEGER,
	name TEXT,
	score INTEGER
);

CREATE TABLE movie_cast(
	movie_id INTEGER,
	cast_id INTEGER,
	cast_name TEXT
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies (score);
CREATE INDEX cast_index ON movie_cast (cast_id);
CREATE INDEX movie_index ON movies (id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

Select DISTINCT
(SELECT 
	COUNT(score)*1.0 
	FROM movies 
	WHERE score > 50)/(
SELECT 
	COUNT(score) 
	FROM movies)*100 
	AS prop 
	FROM movies 
	GROUP BY score;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id,name,AVG(score) as score
FROM movies
GROUP BY id
ORDER BY score DESC
LIMIT(7);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(score) AS movie_count  
FROM 
	(SELECT * 
	 FROM movie_cast 
	 INNER JOIN movies ON movie_cast.movie_id = movies.id
	 ORDER BY cast_name) 
GROUP BY cast_name 
ORDER BY COUNT(score) 
DESC LIMIT(5);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id,cast_name,AVG(score) as average_score
FROM 
	(SELECT * 
	 FROM movie_cast 
	 INNER JOIN movies ON movie_cast.movie_id = movies.id 
	 WHERE score > 50 ORDER BY cast_name) 
GROUP BY cast_name 
HAVING COUNT(score) > 2
ORDER BY AVG(score) DESC
LIMIT(10);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS 
SELECT 
	Actor1.cast_id AS cast_member_id1, 
	Actor2.cast_id AS cast_member_id2,
	COUNT(*) as movie_count, 
	AVG(score) AS average_movie_score 
	
FROM movie_cast AS Actor1
INNER JOIN (
	SELECT * FROM movie_cast AS Actor2
		INNER JOIN movies 
			AS Movie 
			ON Actor2.movie_id = Movie.id) 
AS Actor2 ON Actor2.movie_id = Actor1.movie_id
WHERE Actor1.cast_id < Actor2.cast_id
GROUP BY Actor1.cast_name, Actor2.cast_name
HAVING Movie_Count >= 3
AND average_movie_score >= 40
ORDER BY Movie_Count DESC;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT 
	cast_member_id1 AS cast_id, 
	Actor.cast_name AS cast_name, 
	AVG(average_movie_score) AS collaboration_score
FROM good_collaboration
	INNER JOIN movie_cast AS Actor ON Actor.cast_id = cast_member_id1
	INNER JOIN movies AS Movie ON Actor.movie_id = Movie.id
GROUP BY cast_member_id1
ORDER BY collaboration_score DESC, Actor.cast_name
LIMIT(5);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING FTS4(id INTEGER, name TEXT, year INTEGER, overview TEXT, popularity DECIMAL);
.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT count(*) AS count_overview FROM movie_overview WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --